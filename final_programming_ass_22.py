# -*- coding: utf-8 -*-
"""Final PRogramming AsS 22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HIvru6kB4sdbtt3y6pb4k_aoojTBG8Qj
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from bokeh.plotting import figure, show
from bokeh.models import ColumnDataSource
import altair as alt
from scipy.stats import linregress
import statsmodels.api as sm

from google.colab import drive; drive.mount('/content/drive')

data = pd.read_csv('/content/drive/MyDrive/Programming Assessment 02/Suicides_by_causes_state.csv')

data

# Assuming your DataFrame is named df
df = data[~data['STATE/UT'].str.startswith('TOTAL')]

# Now, you can use filtered_df for your visualizations

df

# 1. Yearly Trends
yearly_trends = df.groupby('Year')['Grand Total'].sum()
plt.plot(yearly_trends.index, yearly_trends.values)
plt.title('Yearly Trends - Total Suicide Cases')
plt.xlabel('Year')
plt.ylabel('Total Suicide Cases')
plt.show()

# 2. Gender Distribution
gender_distribution = df.groupby('Year')[['Total Male', 'Total Female']].sum()
gender_distribution.plot(kind='bar', stacked=True)
plt.title('Gender Distribution of Suicide Cases Over Years')
plt.xlabel('Year')
plt.ylabel('Total Suicide Cases')
plt.show()

#use loops

# 3. Age Group Analysis

age_group_analysis = df.groupby('Year')[['Male upto 14 years', 'Male 15-29 years', 'Male 30-44 years', 'Male 45-59 years', 'Male 60 years and above',
                                        'Female upto 14 years', 'Female 15-29 years', 'Female 30-44 years', 'Female 45-59 years', 'Female 60 years and above']].sum()
age_group_analysis.plot(kind='bar', stacked=True).legend(bbox_to_anchor=(1,1))
plt.title('Age Group Analysis of Suicide Cases Over Years')
plt.xlabel('Year')
plt.ylabel('Total Suicide Cases')
plt.show()

# 4. Cause-wise Analysis
cause_wise_analysis = df.groupby(['Year', 'CAUSE'])['Grand Total'].sum().unstack()
cause_wise_analysis.plot(kind='bar', stacked=True, figsize=(15, 10)).legend(bbox_to_anchor=(1,1))
plt.title('Cause-wise Analysis of Suicide Cases Over Years')
plt.xlabel('Year')
plt.ylabel('Total Suicide Cases')
plt.show()

# Exclude rows with causes 'Total' and 'Total Illness'
filtered_df = df[~df['CAUSE'].isin(['Total', 'Total Illness'])]

# 5. Top Causes
top_causes = filtered_df.groupby('CAUSE')['Grand Total'].sum().sort_values(ascending=False).head(10)
top_causes.plot(kind='bar')
plt.title('Top 10 Causes of Suicide Cases')
plt.xlabel('Cause')
plt.ylabel('Total Suicide Cases')
plt.show()

# 6. State/UT-wise Analysis
state_wise_analysis = df.groupby('STATE/UT')['Grand Total'].sum().sort_values(ascending=False)
state_wise_analysis.plot(kind='bar', figsize=(12, 6))
plt.title('State/UT-wise Analysis of Suicide Cases')
plt.xlabel('State/UT')
plt.ylabel('Total Suicide Cases')
plt.show()

#7

import pandas as pd
import matplotlib.pyplot as plt

# Assuming your dataset is stored in a variable named 'df'
# Filter the data for the 'Failure in Examination' cause
failure_data = df[df['CAUSE'] == 'Failure in Examination']

# Group the data by year and calculate the total failures each year
yearly_failure = failure_data.groupby('Year')['Grand Total'].sum().reset_index()

# Plot the yearly trend
plt.figure(figsize=(10, 6))
plt.plot(yearly_failure['Year'], yearly_failure['Grand Total'], marker='o', linestyle='-')
plt.title('Yearly Trend for Failure in Examination')
plt.xlabel('Year')
plt.ylabel('Total Failures')
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Assuming your dataset is stored in a variable named 'df'
# Filter the data for the 'Failure in Examination' cause
failure_data = df[df['CAUSE'] == 'Failure in Examination']

# Group the data by year and state, and calculate the total failures each year for each state
state_yearly_failure = failure_data.groupby(['Year', 'STATE/UT'])['Grand Total'].sum().reset_index()

# Pivot the data to have states as columns and years as index
pivot_table = state_yearly_failure.pivot_table(index='Year', columns='STATE/UT', values='Grand Total', fill_value=0)

# Plot the yearly trend for each state
plt.figure(figsize=(15, 8))
pivot_table.plot(marker='o', linestyle='-', ax=plt.gca())
plt.title('Yearly Trend for Failure in Examination by State')
plt.xlabel('Year')
plt.ylabel('Total Failures')
plt.legend(title='State', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True)
plt.tight_layout()
plt.show()

# 9. Overall Summary
overall_summary = df[['Total Male', 'Total Female', 'Grand Total']].sum()
overall_summary.plot(kind='bar')
plt.title('Overall Summary of Suicide Cases')
plt.xlabel('Gender')
plt.ylabel('Total Suicide Cases')
plt.show()

import seaborn as sns

# Percentage Distribution of Causes (Pie Chart) with Seaborn
cause_percentage_df = filtered_df.groupby('CAUSE')['Grand Total'].sum() / filtered_df['Grand Total'].sum() * 100
plt.figure(figsize=(10, 10))
sns.set(style="whitegrid")  # Set a whitegrid background for better visibility

# Create a pie chart using Seaborn's countplot
ax = sns.countplot(x=cause_percentage_df.index, data=cause_percentage_df, palette="viridis")

# Annotate each wedge with its percentage
total = len(filtered_df)
for p in ax.patches:
    percentage = '{:.1f}%'.format(100 * p.get_height() / total)
    x = p.get_x() + p.get_width() / 2
    y = p.get_height()
    ax.annotate(percentage, (x, y), ha='center', va='center')

# Rotate x-axis labels for better readability
plt.xticks(rotation=45, ha='right')

plt.title('Percentage Distribution of Causes')
plt.show()

#Ignore 'Total Illness' and 'Total'
filtered_df = df[~df['CAUSE'].str.contains('Total')]

# Percentage Distribution of Causes (Pie Chart)
cause_percentage_df = filtered_df.groupby('CAUSE')['Grand Total'].sum() / filtered_df['Grand Total'].sum() * 100
plt.figure(figsize=(10, 10))
pie = plt.pie(cause_percentage_df, labels=cause_percentage_df.index, autopct='%1.1f%%', startangle=90)
plt.title('Percentage Distribution of Causes')
#plt.xticks(rotation='45')
# Rotate labels if needed
for text in pie[1]:
    text.set_rotation(50)  # You can adjust the rotation angle as needed

plt.show()

# Regression Analysis (Scipy)
regression_df = filtered_df.groupby('Year')['Grand Total'].sum().reset_index()
slope, intercept, r_value, p_value, std_err = linregress(regression_df['Year'], regression_df['Grand Total'])

#ignore illness and total
# Percentage Distribution of Causes (Pie Chart)
cause_percentage_df = df.groupby('CAUSE')['Grand Total'].sum() / df['Grand Total'].sum() * 100
plt.figure(figsize=(10, 10))
plt.pie(cause_percentage_df, labels=cause_percentage_df.index, autopct='%1.1f%%', startangle=90)
plt.title('Percentage Distribution of Causes')
plt.show()

# Regression Analysis (Scipy)
regression_df = df.groupby('Year')['Grand Total'].sum().reset_index()
slope, intercept, r_value, p_value, std_err = linregress(regression_df['Year'], regression_df['Grand Total'])

# Fit linear regression to analyze the trend over the years
regression_df = df.groupby('Year')['Grand Total'].sum().reset_index()
X = sm.add_constant(regression_df['Year'])
model = sm.OLS(regression_df['Grand Total'], X).fit()
trend_line = model.predict(X)
plt.plot(regression_df['Year'], regression_df['Grand Total'], label='Actual')
plt.plot(regression_df['Year'], trend_line, label='Trend Line', linestyle='dashed')
plt.legend()
plt.title('Trend Analysis of Suicides Over the Years')
plt.xlabel('Year')
plt.ylabel('Total Suicides')
plt.show()

# Bar chart: Comparison of suicide rates in Andhra Pradesh to national or regional averages
bar_chart_state_comparison = df[df['STATE/UT'] == 'ANDHRA PRADESH'].groupby(['Year']).sum()['Grand Total'].plot(kind='bar', color='blue', label='Andhra Pradesh')
national_average = df.groupby(['Year']).sum()['Grand Total'].plot(kind='bar', color='orange', label='National Average', alpha=0.7)
plt.title('Comparison of Suicide Rates in Andhra Pradesh and National Average')
plt.xlabel('Year')
plt.ylabel('Total Suicides')
plt.legend()
plt.show()

pip install geopandas matplotlib

import geopandas as gpd
import pandas as pd

# Load GeoJSON data
geo_data = gpd.read_file('/content/drive/MyDrive/Programming Assessment 02/INDIA_STATES.json')

# Create GeoDataFrame from GeoJSON
#gdf_geojson = gpd.GeoDataFrame.from_features(geo_data["features"])

# Convert GeoJSON to GeoDataFrame
gdf = gpd.GeoDataFrame.from_features(geo_data.get("features", []))

# Load suicide data (assuming your dataset is stored in a variable df)
# Merge suicide data with GeoJSON data
merged_df = geo_data.merge(df, left_on="STATE", right_on="STATE/UT", how="left")

"""
# Create choropleth map
fig = px.choropleth(
    merged_df,
    geojson=geo_data.geometry,
    locations=merged_df.index,
    color='Grand Total',
    hover_name='STATE',
    featureidkey="properties.STATE",
    color_continuous_scale='Blues',
    title='Choropleth Map of Indian States',
)

fig.update_geos(fitbounds="locations", visible=False)
fig.show()
"""

merged_df.fillna(0)

# Plot the GeoDataFrame with suicide data
merged_df.plot(column="Grand Total", cmap="OrRd", legend=True, figsize=(10, 10))
plt.title("Total Suicides by State")
plt.show()

merged_df.plot(column="Total Male", cmap="OrRd", legend=True, figsize=(10, 10))
plt.title("Total Suicides by State")
plt.show()

merged_df.plot(column="Total Female", cmap="OrRd", legend=True, figsize=(10, 10))
plt.title("Total Suicides by State")
plt.show()

merged_df.plot(column="Male upto 14 years", cmap="OrRd", legend=True, figsize=(10, 10))
plt.title("Total Suicides by State")
plt.show()

#data is missing from telengana and other states